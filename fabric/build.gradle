plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        datagen {
            inherit server
            name "Data Generation"

            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(":common").file("src/main/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=ftbpc"

            runDir "build/datagen"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        url "https://maven.terraformersmc.com/releases/"
        content {
            includeGroup "com.terraformersmc"
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modImplementation ("dev.ftb.mods:ftb-library-fabric:${rootProject.ftb_library_version}") { transitive false }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}") {
        transitive = false
    }
//    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")
//
    // Include modmenu
    modImplementation("com.terraformersmc:modmenu:${modmenu_version}") {
        transitive = false
    }

    modRuntimeOnly "curse.maven:jade-324717:5072729"

    // Testing mods
    modRuntimeOnly("curse.maven:cloth-config-348521:4973441") {
        transitive = false
    }

    modRuntimeOnly("curse.maven:ae2-223794:5169355") {
        transitive = false
    }
    modRuntimeOnly('teamreborn:energy:2.2.0') {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    setArchiveClassifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    setArchiveClassifier null
}

jar {
    setArchiveClassifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.maven_group
            artifactId = "${rootProject.archivesBaseName}-${project.name}"
            version = ftbPublishing.mavenVersion

            artifact(remapJar) {
                builtBy remapJar
            }
        }
    }
}

if (ENV.CURSEFORGE_KEY) {
    curseforge {
        apiKey = ENV.CURSEFORGE_KEY
        project {
            id = rootProject.curseforge_id
            releaseType = ftbPublishing.relType
            addGameVersion "Fabric"
            addGameVersion rootProject.minecraft_version
            mainArtifact(remapJar.archiveFile)
            relations {
                requiredDependency 'ftb-library-fabric'
            }
            changelog = ENV.CHANGELOG  // expected to exist if ENV.CURSEFORGE_KEY does
            changelogType = 'markdown'
        }
    }
}
