plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        url "https://cursemaven.com"
    }

    repositories {
        maven {
            name = 'tterrag maven'
            url = 'https://maven.tterrag.com/'
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_api_version}"

    modImplementation("dev.ftb.mods:ftb-library-neoforge:${rootProject.ftb_library_version}") { transitive false }

    if (isEnabled(jei_enabled)) {
        modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
        modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
        modRuntimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
    }

// Waiting for ports
//    modRuntimeOnly("net.darkhax.tips:Tips-Forge-${minecraft_version}:${tips_version}")
//    modRuntimeOnly("net.darkhax.bookshelf:Bookshelf-Forge-${minecraft_version}:${bs_version}")
//    modCompileOnly("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
//    modRuntimeOnly("com.simibubi.create:create-${minecraft_version}:${create_version}") { transitive = false }
//    modRuntimeOnly("com.tterrag.registrate:Registrate:${registrate_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    def props = [
        "version": project.version,
        "archversion": project.architectury_api_version,
        "neoforge_version": project.neoforge_version,
        "neoforge_loader_version": project.neoforge_loader_version,
        "minecraft_version": project.minecraft_version,
        "next_minecraft_version": project.next_minecraft_version,
        "ftblibraryversion": project.ftb_library_version
    ]

    inputs.properties props

    filesMatching("META-INF/neoforge.mods.toml") {
        expand props
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    setArchiveClassifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    setArchiveClassifier null
}

jar {
    setArchiveClassifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.maven_group
            artifactId = "${rootProject.archivesBaseName}-${project.name}"
            version = ftbPublishing.mavenVersion

            artifact(remapJar) {
                builtBy remapJar
            }
        }
    }
}
