plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "ftbpc-common.mixins.json"
        mixinConfig "ftbpc.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        url "https://cursemaven.com"
    }

    repositories {
        maven {
            name = 'tterrag maven'
            url = 'https://maven.tterrag.com/'
        }
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modImplementation("dev.ftb.mods:ftb-library-forge:${rootProject.ftb_library_version}") { transitive false }

    modCompileOnly("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }

    modRuntimeOnly("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    modRuntimeOnly("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    modRuntimeOnly("com.tterrag.registrate:Registrate:${registrate_version}")

    modRuntimeOnly("curse.maven:creeperhost-minetogether-267172:5075807")
    modRuntimeOnly("curse.maven:poly-576589:4895988")

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-core:${jei_version}") // Required for JER
//    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    modRuntimeOnly("curse.maven:jei-238222:5106178")

//    modRuntimeOnly("net.darkhax.tips:Tips-Forge-${minecraft_version}:${tips_version}")
//    modRuntimeOnly("net.darkhax.bookshelf:Bookshelf-Forge-${minecraft_version}:${bs_version}")

    modImplementation("curse.maven:jer-240630:4862430")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.maven_group
            artifactId = "${rootProject.archivesBaseName}-${project.name}"
            version = ftbPublishing.mavenVersion

            artifact(remapJar) {
                builtBy remapJar
            }
        }
    }
}

if (ENV.CURSEFORGE_KEY) {
    curseforge {
        apiKey = ENV.CURSEFORGE_KEY
        project {
            id = rootProject.curseforge_id
            releaseType = ftbPublishing.relType
            addGameVersion "Forge"
            addGameVersion rootProject.minecraft_version
            mainArtifact(remapJar.archiveFile)
            relations {
                requiredDependency 'ftb-library-forge'
            }
            changelog = ENV.CHANGELOG  // expected to exist if ENV.CURSEFORGE_KEY does
            changelogType = 'markdown'
        }
    }
}
