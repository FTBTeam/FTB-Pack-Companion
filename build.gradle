plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

architectury {
    minecraft = rootProject.minecraft_version
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = "${mod_version}+mc${minecraft_version}"
    group = rootProject.maven_group

    repositories {
        maven {
            url "https://maven.ftb.dev/releases"
        }
        maven {
            url "https://maven.creeperhost.net"
        }
        maven {
            url 'https://maven.blamejared.com'
            content {
                includeGroup "net.darkhax"
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: 'maven-publish'

    apply from: rootProject.file("extra-build.gradle")
    apply from: 'https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/publishing.gradle'

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
        }
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.19+build.4:v2"
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
            content {
                includeGroup "mezz.jei"
            }
        }
    }

    publishing {
        repositories {
            if (providers.environmentVariable("FTB_MAVEN_TOKEN").isPresent()) {
                maven {
                    url ftbPublishing.ftbURL
                    credentials {
                        username = "ftb"
                        password = providers.environmentVariable("FTB_MAVEN_TOKEN").getOrElse("")
                    }
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_KEY").getOrNull() == null
    changelog = providers.environmentVariable("CHANGELOG").getOrElse("No changelog provided")
    version = "${mod_version}"

    def tag = providers.environmentVariable("TAG").getOrElse("release")
    type = (!tag.contains("beta") && !tag.contains("alpha")) ? STABLE : (tag.contains("beta") ? BETA : ALPHA)

    def createOptions = (String projectName) -> {
        publishOptions {
            file = project.provider { project(":$projectName").tasks.remapJar }.flatMap { it.archiveFile }
            displayName = "[${projectName.toUpperCase()}][${minecraft_version}] ${readable_name} ${mod_version}"
            modLoaders.add(projectName.toLowerCase())
        }
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_KEY")
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, createOptions("fabric"))
        projectId = curseforge_id
        requires { slug = "fabric-api" }
        requires { slug = "architectury-api" }
        requires { slug = 'ftb-library-fabric' }
    }

    curseforge("curseforgeNeoForge") {
        from(curseForgeOptions, createOptions("neoforge"))
        projectId = curseforge_id
        requires { slug = "architectury-api" }
        requires { slug = 'ftb-library-forge' }
    }
}
